function DLangoTranslate() {
  const inputText = inputTextElem.value; //stores input text contents
  const inpLang = inpLangDropd.querySelector(".selected").dataset.value; //notifies which input got selected/detected
  const outpLanguage = outpLangDropd.querySelector(".selected").dataset.value; //notifies which output got selected/detected
  const url = `https://translate.googleapis.com/translate_a/single?client=gtx&sl=${inpLang}&tl=${outpLanguage}&dt=t&q=${encodeURI(inputText)}`;
  fetch(url) //https://translate.googleapis.com/translate_a/single (base URL) , client=gtx (indicating general translation request) , sl for input
  // tl for output , ${encodeURI(inputText)} for our input elements

    .then((response) => response.json()) //fetches response
    .then((json) => {
      console.log(json); //prints output
      outputTextElem.value = json[0].map((item) => item[0]).join(""); //maps the item where to connect and print
    })
    .catch((error) => {
      console.log(error);//Exception Handling
    });
}
const ddowns = document.querySelectorAll(".dropdown-container"), //dropdown 
  inpLangDropd = document.querySelector("#input-language"), //input language dropdown menu  
  outpLangDropd = document.querySelector("#output-language"); 	


DropD(inpLangDropd, lang);  //calling input languages 
DropD(outpLangDropd, lang);  //calling output languages

swapBtn.addEventListener("click", (e) => { //used to swap
  const temp = inpLang.innerHTML; //stored in a temporary variable
  inpLang.innerHTML = outpLang.innerHTML;
  outpLang.innerHTML = temp; //swapped
  const tempValue = inpLang.dataset.value; //stored in another temporary value variable 
  inpLang.dataset.value = outpLang.dataset.value;
  outpLang.dataset.value = tempValue; //swapped
  //swapping text
  const tempInputText = inputTextElem.value;
  inputTextElem.value = outputTextElem.value;
  outputTextElem.value = tempInputText;
   DLangoTranslate();
});

ddowns.forEach((dropdown) => {
  dropdown.addEventListener("click", (e) => {
    dropdown.classList.toggle("active"); //sets toggle as active
  });
 
  dropdown.querySelectorAll(".option").forEach((item) => { //option works as a thread
    item.addEventListener("click", (e) => {//removes active class from current dropdowns
      dropdown.querySelectorAll(".option").forEach((item) => {
        item.classList.remove("active");
      });
      item.classList.add("active");
      const selected = dropdown.querySelector(".selected");
      selected.innerHTML = item.innerHTML;  //text translates to selected one
      selected.dataset.value = item.dataset.value; //value specifies here
      DLangoTranslate();
    });
  });
});
document.addEventListener("click", (e) => {
  ddowns.forEach((dropdown) => {
    if (!dropdown.contains(e.target)) { //specific language is chosen
      dropdown.classList.remove("active");
    }
  });
});
function DropD(dropdown, options) {
  dropdown.querySelector("ul").innerHTML = "";  //list of languages
  options.forEach((option) => {
    const li = document.createElement("li");
    const title = option.name + " (" + option.native + ")"; //menu items(languages)
    li.innerHTML = title; //title 
    li.dataset.value = option.code;
    li.classList.add("option");
    dropdown.querySelector("ul").appendChild(li); //append to add elements
  });
}


const swapBtn = document.querySelector(".swap-position"),  //swap button
  inpLang = inpLangDropd.querySelector(".selected"), //for selected input language
  outpLang = outpLangDropd.querySelector(".selected"), //for selected output language
  inputTextElem = document.querySelector("#input-text"),
  outputTextElem = document.querySelector("#output-text");

inputTextElem.addEventListener("input", (e) => {
  //limit input to 10000 characters
  if (inputTextElem.value.length > 10000) {
    inputTextElem.value = inputTextElem.value.slice(0, 10000);  //specifying range
  }
  DLangoTranslate();
});

const uploadDocument = document.querySelector("#upload-document"), //to upload any document
  uploadTitle = document.querySelector("#upload-title");


uploadDocument.addEventListener("change", (e) => {
  const file = e.target.files[0];
  if ( //target files which are possible to add 
    file.type === "application/pdf" ||
    file.type === "application/rtf" ||
    file.type === "text/plain" ||
    file.type === "application/msword" ||
    file.type === "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
  ) {
    uploadTitle.innerHTML = file.name;
    const reader = new FileReader();
    reader.readAsText(file);
    reader.onload = (e) => {
      inputTextElem.value = e.target.result;
      DLangoTranslate();
    };
  } else { //Exception if error
    alert("Please upload a valid file");
  }
});

const downloadBtn = document.querySelector("#download-btn"); //variable which leads to download button
downloadBtn.addEventListener("click", (e) => {
  const outputText = outputTextElem.value; //stores output text contents in a variable
  const outpLang = outpLangDropd.querySelector(".selected").dataset.value;
  if (outputText) {
    const blob = new Blob([outputText], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.download = `Translated text.doc`;
    a.href = url;
    a.click();
  }
});

const darkModeCheckbox = document.getElementById("dark-mode-btn");//dark mode variable

darkModeCheckbox.addEventListener("change", () => {
  document.body.classList.toggle("dark"); //turns on darkmode 
});

const inputChars = document.querySelector("#input-chars"); // stores items present in inputChars

inputTextElem.addEventListener("input", (e) => {
  inputChars.innerHTML = inputTextElem.value.length; // length of input Element
});